{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "da2f9800-cd00-4ec5-99b2-9a5bbbed55f4",
   "metadata": {},
   "source": [
    "# Python Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e569bde5-f5ac-45d0-b57b-1d8cf776302f",
   "metadata": {},
   "source": [
    "# Create functions with different numbers of parameters and return types"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f8ded123-7176-46fa-adec-a0d1edf65da0",
   "metadata": {},
   "source": [
    "1. Function with No Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fa42372d-3341-4920-91ff-ebe92fc4ae7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Good Morning!\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    return \"Good Morning!\"\n",
    "    \n",
    "print(greet())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91763d9f-041c-4ff2-80cd-367a7195f231",
   "metadata": {},
   "source": [
    "2. Function with One Parameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f4bc23c5-eebe-4860-a327-2e1e3b3081f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Square of 6: 36\n"
     ]
    }
   ],
   "source": [
    "def square(number):\n",
    "    return number ** 2\n",
    "    \n",
    "result = square(6)\n",
    "print(\"Square of 6:\", result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06b8ac57-fed3-4443-ba30-1ddde5ca31ef",
   "metadata": {},
   "source": [
    "3. Function with Two Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6cbae0f6-6055-4db1-b473-efd143923739",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of 3 and 4: 7\n"
     ]
    }
   ],
   "source": [
    "def add(a, b):\n",
    "    return a + b\n",
    "    \n",
    "sum_result = add(3, 4)\n",
    "print(\"Sum of 3 and 4:\", sum_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ebdd291-65fb-4e02-a3d1-7129460ef535",
   "metadata": {},
   "source": [
    "4. Function with Default Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "41aee9d0-6258-459c-ac66-b75761abb340",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi, Alice!\n",
      "Hello, Bob!\n"
     ]
    }
   ],
   "source": [
    "def greet_user(name, greeting=\"Hi\"):\n",
    "    return f\"{greeting}, {name}!\"\n",
    "\n",
    "print(greet_user(\"Alice\"))\n",
    "print(greet_user(\"Bob\", \"Hello\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "769413ff-16c4-499d-8a7f-d198bdfa78fd",
   "metadata": {},
   "source": [
    "5. Function with Variable Number of Arguments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "018da15e-3d12-4ef7-923f-26fa6232ae78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Concatenated String: Hello this is a test.\n"
     ]
    }
   ],
   "source": [
    "def concatenate(*args):\n",
    "    return \" \".join(args)\n",
    "    \n",
    "result = concatenate(\"Hello\", \"this\", \"is\", \"a\", \"test.\")\n",
    "print(\"Concatenated String:\", result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fbaa159-1b23-44d2-81c6-b0208079275c",
   "metadata": {},
   "source": [
    "# Explore function scope and variable accessibility."
   ]
  },
  {
   "cell_type": "raw",
   "id": "ee99c541-4c7d-4261-9dc7-9a2db6716557",
   "metadata": {},
   "source": [
    "1. Global vs. Local Scope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6e6488e8-8640-4dbb-8894-de2630ac7197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inside function:\n",
      "Local y: 5\n",
      "Global x: 10\n",
      "Outside function:\n",
      "Global x: 10\n"
     ]
    }
   ],
   "source": [
    "x = 10\n",
    "\n",
    "def example_function():\n",
    "    y = 5\n",
    "    print(\"Inside function:\")\n",
    "    print(\"Local y:\", y)\n",
    "    print(\"Global x:\", x)\n",
    "\n",
    "example_function()\n",
    "\n",
    "print(\"Outside function:\")\n",
    "print(\"Global x:\", x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd68ee89-de57-4812-bac9-5454f8e361a8",
   "metadata": {},
   "source": [
    "2. Modifying Global Variables Inside a Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "283583f3-ee69-490f-ba3e-4c40fd3ec3f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count inside function: 1\n",
      "Count outside function: 1\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "\n",
    "def increment():\n",
    "    global count  # Correctly indented global keyword\n",
    "    count += 1\n",
    "    print(\"Count inside function:\", count)\n",
    "\n",
    "increment()\n",
    "print(\"Count outside function:\", count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce63b1a5-4c50-4167-ba6b-03933bf08c00",
   "metadata": {},
   "source": [
    "3. Nested Functions and Variable Scope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d72f607c-2170-445c-9aff-055132077fe1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I'm from the inner function!\n",
      "I'm from the outer function!\n"
     ]
    }
   ],
   "source": [
    "def outer_function():\n",
    "    outer_var = \"I'm from the outer function!\"\n",
    "    \n",
    "    def inner_function():\n",
    "        inner_var = \"I'm from the inner function!\"\n",
    "        print(inner_var)      # This will print the inner variable\n",
    "        print(outer_var)      # This will print the outer variable from the enclosing scope\n",
    "\n",
    "    inner_function()\n",
    "    # print(inner_var)       # Uncommenting this line will raise an error because inner_var is not accessible here\n",
    "\n",
    "outer_function()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7b8f9b8-ad46-4a96-a41f-c8343bcefb16",
   "metadata": {},
   "source": [
    "4. Function Arguments and Local Scope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9cbaab74-2880-404d-b33c-25f8152ea6bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Product: 12\n"
     ]
    }
   ],
   "source": [
    "def multiply(a, b):\n",
    "    result = a * b  # Indented\n",
    "    return result   # Indented\n",
    "\n",
    "product = multiply(3, 4)\n",
    "print(\"Product:\", product)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e2edba8-3f6e-43f1-b700-6e2c52ca515b",
   "metadata": {},
   "source": [
    "5. Nonlocal Variables in Nested Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d94751a6-f8ba-4b8e-a483-86a4caa81c96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inner outer_var: 15\n",
      "Outer outer_var: 15\n"
     ]
    }
   ],
   "source": [
    "def outer_function():\n",
    "    outer_var = 10\n",
    "    \n",
    "    def inner_function():\n",
    "        nonlocal outer_var  # Use nonlocal to modify the variable in the outer function's scope\n",
    "        outer_var += 5\n",
    "        print(\"Inner outer_var:\", outer_var)\n",
    "\n",
    "    inner_function()\n",
    "    print(\"Outer outer_var:\", outer_var)\n",
    "\n",
    "outer_function()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62ee3902-02ea-409e-af97-5bf60af3ad7e",
   "metadata": {},
   "source": [
    "# Implement functions with default argument values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99b78e4b-7744-48e9-9286-66bfa0d089cd",
   "metadata": {},
   "source": [
    "1. Basic Default Argument"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "15a45437-8d94-4c57-bced-bdbb8ef00a4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, Guest!\n",
      "Hello, Alice!\n"
     ]
    }
   ],
   "source": [
    "def greet(name=\"Guest\"):\n",
    "    return f\"Hello, {name}!\"\n",
    "\n",
    "print(greet())         # Calls greet() with the default argument \"Guest\"\n",
    "print(greet(\"Alice\"))  # Calls greet() with the argument \"Alice\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "899dffda-a8fc-4dba-a7c3-f2d1774f8c60",
   "metadata": {},
   "source": [
    "2. Multiple Default Arguments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "c658d679-a267-413f-b285-9530d886ad66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I have a dog named Fido.\n",
      "I have a cat named Fido.\n",
      "I have a rabbit named Bunny.\n"
     ]
    }
   ],
   "source": [
    "def describe_pet(animal_type=\"dog\", pet_name=\"Fido\"):\n",
    "    return f\"I have a {animal_type} named {pet_name}.\"\n",
    "\n",
    "print(describe_pet())                     # Uses default values: \"dog\" and \"Fido\"\n",
    "print(describe_pet(\"cat\"))                # Uses \"cat\" for animal_type and default \"Fido\"\n",
    "print(describe_pet(\"rabbit\", \"Bunny\"))    # Uses \"rabbit\" and \"Bunny\" as the arguments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c24b4716-fbba-470b-b79c-dce4fbb34a83",
   "metadata": {},
   "source": [
    "3. Default Values and Keyword Arguments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "c0358467-b1b0-40c3-9255-3d25667f05fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1984 by George Orwell, published in 2021.\n",
      "The Great Gatsby by F. Scott Fitzgerald, published in 1925.\n"
     ]
    }
   ],
   "source": [
    "def book_info(title, author, year=2021):\n",
    "    return f\"{title} by {author}, published in {year}.\"\n",
    "\n",
    "print(book_info(\"1984\", \"George Orwell\"))\n",
    "print(book_info(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68dec6ed-ef5a-46ab-8626-2c54dd6c8506",
   "metadata": {},
   "source": [
    "4. Combining Default and Non-default Arguments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "e22cef89-07dd-46b5-8c1f-532e167bb0b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You ordered a Medium cup of Regular coffee.\n",
      "You ordered a Large cup of Decaf coffee.\n"
     ]
    }
   ],
   "source": [
    "def order_coffee(size, type=\"Regular\"):\n",
    "    return f\"You ordered a {size} cup of {type} coffee.\"\n",
    "\n",
    "# Calling the function\n",
    "print(order_coffee(\"Medium\"))             # Uses default type \"Regular\"\n",
    "print(order_coffee(\"Large\", \"Decaf\"))     # Specifies type \"Decaf\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d16df1bf-c586-4b77-8d82-1ef8b41ee036",
   "metadata": {},
   "source": [
    "5. Using Default Values in Recursive Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "12b809a5-0031-4eb6-aaa8-6a9601c208ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120\n"
     ]
    }
   ],
   "source": [
    "def factorial(n, result=1):\n",
    "    if n == 0:\n",
    "        return result\n",
    "    else:\n",
    "        return factorial(n - 1, result * n)\n",
    "\n",
    "# Calling the function\n",
    "print(factorial(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7be368e-5740-48b0-b85d-761ec9458b3e",
   "metadata": {},
   "source": [
    "# Write recursive functions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5730e887-f533-4ce1-9669-ffd065c2d319",
   "metadata": {},
   "source": [
    "1. Factorial of a Number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "c15f2826-4b8f-44f6-a406-6101ba5f4563",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120\n"
     ]
    }
   ],
   "source": [
    "def factorial(n):\n",
    "    if n == 0:  # Base case\n",
    "        return 1\n",
    "    else:\n",
    "        return n * factorial(n - 1)  # Recursive case\n",
    "\n",
    "print(factorial(5))  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5af586bc-7c91-4a1e-b239-19dd74ded492",
   "metadata": {},
   "source": [
    "2. Fibonacci Sequence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "ff4643b2-6c22-47b2-8897-ea8fc0d6a882",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "def fibonacci(n):\n",
    "    if n <= 1:  # Base case\n",
    "        return n\n",
    "    else:\n",
    "        return fibonacci(n - 1) + fibonacci(n - 2)  # Recursive case\n",
    "\n",
    "print(fibonacci(6))  # Output: 8 (Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "666b3421-98c3-4702-8891-c8e8aab77b0b",
   "metadata": {},
   "source": [
    "3. Sum of a List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c8171790-d946-4aed-93f5-6cb5a47f12c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "def recursive_sum(lst):\n",
    "    if not lst:  # Base case: empty list\n",
    "        return 0\n",
    "    else:\n",
    "        return lst[0] + recursive_sum(lst[1:])  # Recursive case\n",
    "\n",
    "print(recursive_sum([1, 2, 3, 4, 5]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf65d255-663c-4294-bd85-a835e616acdb",
   "metadata": {},
   "source": [
    "4. Reverse a String"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "ca83a992-94df-4aa1-bae7-9579fa8ee4f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gninroM\n"
     ]
    }
   ],
   "source": [
    "def reverse_string(s):\n",
    "    if len(s) == 0:  # Base case\n",
    "        return s\n",
    "    else:\n",
    "        return s[-1] + reverse_string(s[:-1])  # Recursive case\n",
    "\n",
    "print(reverse_string(\"Morning\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29a0e586-2406-4653-9fac-29a9ad39c5b0",
   "metadata": {},
   "source": [
    "5. Count Down"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "813a80bc-285d-468c-8380-49c7fdca438e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n",
      "Blast off!\n"
     ]
    }
   ],
   "source": [
    "def countdown(n):\n",
    "    if n <= 0:  # Base case\n",
    "        print(\"Blast off!\")\n",
    "    else:\n",
    "        print(n)\n",
    "        countdown(n - 1)  # Recursive case\n",
    "\n",
    "countdown(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84f84679-cbf7-4df6-85ad-8a161beb6e01",
   "metadata": {},
   "source": [
    "# Demonstrate how to use docstrings to document functions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "779fc894-e9e8-4df8-8222-51102a4e80dd",
   "metadata": {},
   "source": [
    "1. Accessing Docstrings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "47ffe6a3-be38-4242-953f-6e1b3d3a07c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(add.__doc__)\n",
    "print(factorial.__doc__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1edcdd68-0636-40d0-be25-e959e0126449",
   "metadata": {},
   "source": [
    "2. Function with Multiple Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "a547903c-9a89-4017-9043-6c87e1d946fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I have a dog named Buddy.\n"
     ]
    }
   ],
   "source": [
    "def describe_pet(animal_type, pet_name):\n",
    "    \"\"\"\n",
    "    Describe a pet with its type and name.\n",
    "\n",
    "    Parameters:\n",
    "    animal_type (str): The type of animal (e.g., dog, cat).\n",
    "    pet_name (str): The name of the pet.\n",
    "\n",
    "    Returns:\n",
    "    str: A description of the pet.\n",
    "    \"\"\"\n",
    "    return f\"I have a {animal_type} named {pet_name}.\"\n",
    "\n",
    "# Calling the function\n",
    "description = describe_pet(\"dog\", \"Buddy\")\n",
    "print(description)  # Output: I have a dog named Buddy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52771f20-afda-44f6-a354-4a1a6e8519a5",
   "metadata": {},
   "source": [
    "3. Function with Default Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "d33746de-042b-477d-b682-cc441c46d0ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, Alice!\n",
      "Hi, Bob!\n"
     ]
    }
   ],
   "source": [
    "def greet(name, greeting=\"Hello\"):\n",
    "    \"\"\"\n",
    "    Generate a greeting message.\n",
    "\n",
    "    Parameters:\n",
    "    name (str): The name of the person to greet.\n",
    "    greeting (str, optional): The greeting message. Defaults to \"Hello\".\n",
    "\n",
    "    Returns:\n",
    "    str: A formatted greeting message.\n",
    "    \"\"\"\n",
    "    return f\"{greeting}, {name}!\"\n",
    "\n",
    "# Calling the function\n",
    "print(greet(\"Alice\"))          \n",
    "print(greet(\"Bob\", \"Hi\")) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33f9dd1e-75ae-41df-968b-f922a3e79c3e",
   "metadata": {},
   "source": [
    "4. Generate a List of Even Numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "a19de62e-1989-4152-bd37-28a922e9cb05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 2, 4, 6, 8, 10]\n"
     ]
    }
   ],
   "source": [
    "def generate_even_numbers(n):\n",
    "    \"\"\"\n",
    "    Generate a list of even numbers up to n.\n",
    "\n",
    "    Parameters:\n",
    "    n (int): The upper limit (inclusive).\n",
    "\n",
    "    Returns:\n",
    "    list: A list of even numbers from 0 to n.\n",
    "    \"\"\"\n",
    "    return [i for i in range(n + 1) if i % 2 == 0]\n",
    "\n",
    "# Example call\n",
    "print(generate_even_numbers(10))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e33bd5e-f9aa-4d66-923c-32221b60dca0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
